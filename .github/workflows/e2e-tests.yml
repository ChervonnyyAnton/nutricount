name: E2E Tests

# E2E tests now enabled with fixes for:
# - Playwright browser installation in CI
# - Server startup race conditions
# - Better health checks and logging
# See E2E_TEST_ANALYSIS.md for details on the fixes

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  e2e-tests-local:
    name: E2E Tests - Local Version (Flask Backend)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-minimal.txt
        mkdir -p logs
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Install Node dependencies
      run: |
        npm install
    
    - name: Install Playwright browsers with system dependencies
      run: |
        npx playwright install chromium --with-deps
      env:
        # Playwright requires these for browser installation
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
    
    - name: Verify Playwright installation
      run: |
        npx playwright --version
        ls -la ~/.cache/ms-playwright/ || echo "Playwright cache not found"
    
    - name: Initialize database
      run: |
        export PYTHONPATH=${{ github.workspace }}
        python3 init_db.py
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Start Flask server
      run: |
        export PYTHONPATH=${{ github.workspace }}
        export FLASK_ENV=test
        nohup python3 app.py > flask.log 2>&1 &
        echo $! > flask.pid
        sleep 3
        # Wait for server to be ready with retries
        for i in {1..30}; do
          if curl -f http://localhost:5000/health 2>/dev/null; then
            echo "✅ Flask server is ready"
            exit 0
          fi
          echo "Waiting for Flask server... ($i/30)"
          sleep 2
        done
        echo "❌ Flask server failed to start"
        cat flask.log
        exit 1
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run E2E tests (Local Version)
      run: |
        npm run test:e2e
      env:
        BASE_URL: http://localhost:5000
        CI: true
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
    
    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-local
        path: playwright-report/
        retention-days: 7
    
    - name: Upload test videos on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-videos-local
        path: test-results/
        retention-days: 7
    
    - name: Show Flask logs on failure
      if: failure()
      run: |
        echo "=== Flask Server Logs ==="
        cat flask.log || echo "No flask.log found"
    
    - name: Stop Flask server
      if: always()
      run: |
        if [ -f flask.pid ]; then
          kill $(cat flask.pid) || true
          rm flask.pid
        fi
        rm -f flask.log
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## 🎭 E2E Test Results - Local Version" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f playwright-report/index.html ]; then
          echo "✅ **E2E tests completed successfully**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **E2E tests failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 Artifacts available for debugging" >> $GITHUB_STEP_SUMMARY
        fi

  e2e-tests-public:
    name: E2E Tests - Public Version (Demo SPA)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Node dependencies
      run: |
        npm install
    
    - name: Install Playwright browsers with system dependencies
      run: |
        npx playwright install chromium --with-deps
      env:
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
    
    - name: Verify Playwright installation
      run: |
        npx playwright --version
        ls -la ~/.cache/ms-playwright/ || echo "Playwright cache not found"
    
    - name: Start HTTP server for demo
      run: |
        cd demo
        nohup python3 -m http.server 8080 > demo-server.log 2>&1 &
        echo $! > demo-server.pid
        sleep 2
        # Wait for server to be ready with retries
        for i in {1..15}; do
          if curl -f http://localhost:8080/index.html 2>/dev/null; then
            echo "✅ Demo server is ready"
            exit 0
          fi
          echo "Waiting for demo server... ($i/15)"
          sleep 2
        done
        echo "❌ Demo server failed to start"
        cat demo-server.log
        exit 1
    
    - name: Run E2E tests (Public Version)
      run: |
        npm run test:e2e
      env:
        BASE_URL: http://localhost:8080
        CI: true
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
    
    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-public
        path: playwright-report/
        retention-days: 7
    
    - name: Upload test videos on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-videos-public
        path: test-results/
        retention-days: 7
    
    - name: Show demo server logs on failure
      if: failure()
      run: |
        echo "=== Demo Server Logs ==="
        cat demo/demo-server.log || echo "No demo-server.log found"
    
    - name: Stop demo server
      if: always()
      run: |
        if [ -f demo/demo-server.pid ]; then
          kill $(cat demo/demo-server.pid) || true
          rm demo/demo-server.pid
        fi
        rm -f demo/demo-server.log
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## 🎭 E2E Test Results - Public Version" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f playwright-report/index.html ]; then
          echo "✅ **E2E tests completed successfully**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **E2E tests failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 Artifacts available for debugging" >> $GITHUB_STEP_SUMMARY
        fi
