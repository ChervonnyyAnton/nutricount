name: Deploy Telegram Web App

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nutrition-tracker

jobs:
  # === TESTING ===
  test:
    runs-on: ubuntu-latest
    
    services:
      sqlite:
        image: alpine:latest
        options: >-
          --health-cmd "echo 'SQLite ready'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: Lint with flake8
      run: |
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py --count --max-complexity=10 --max-line-length=120 --statistics
        
    - name: Format check with black
      run: black --check app.py
      
    - name: Import sort check
      run: isort --check-only app.py
      
    - name: Test with pytest
      run: |
        mkdir -p data logs
        export FLASK_ENV=testing
        pytest --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  # === SECURITY SCANNING ===
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # === BUILD AND PUSH ===
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Nutrition Tracker
          org.opencontainers.image.description=WCAG 2.2 compliant nutrition tracking app
          org.opencontainers.image.vendor=Nutrition Tracker Team
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.telegram
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ steps.meta.outputs.labels }}
          VCS_REF=${{ github.sha }}
          
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  # === DEPLOY TO STAGING ===
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/nutrition-tracker
          
          # Update environment
          cat > .env << EOF
          FLASK_ENV=staging
          FLASK_DEBUG=0
          DATABASE_URL=sqlite:///data/nutrition.db
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_STAGING }}
          TELEGRAM_WEBHOOK_SECRET=${{ secrets.TELEGRAM_WEBHOOK_SECRET }}
          DOCKER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          EOF
          
          # Pull new image and restart
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker-compose -f docker-compose.telegram.yml pull
          docker-compose -f docker-compose.telegram.yml up -d
          
          # Health check
          timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 5; done'
          
          echo "✅ Staging deployment completed"
          
    - name: Set Telegram webhook (staging)
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN_STAGING }}/setWebhook" \
          -H "Content-Type: application/json" \
          -d '{
            "url": "${{ secrets.STAGING_WEBHOOK_URL }}",
            "secret_token": "${{ secrets.TELEGRAM_WEBHOOK_SECRET }}",
            "allowed_updates": ["message", "web_app_data"]
          }'

  # === DEPLOY TO PRODUCTION ===
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.deploy_environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment
      uses: actions/github-script@v7
      id: deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            required_contexts: [],
            auto_merge: false
          });
          return deployment.data.id;
          
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          cd /opt/nutrition-tracker
          
          # Backup current deployment
          docker-compose -f docker-compose.telegram.yml exec -T app python -c "
          import requests
          requests.post('http://localhost:5000/api/system/backup')
          print('✅ Pre-deployment backup created')
          "
          
          # Update environment
          cat > .env << EOF
          FLASK_ENV=production
          FLASK_DEBUG=0
          DATABASE_URL=sqlite:///data/nutrition.db
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_WEBHOOK_SECRET=${{ secrets.TELEGRAM_WEBHOOK_SECRET }}
          DOCKER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          EOF
          
          # Pull new image and restart with zero-downtime
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker-compose -f docker-compose.telegram.yml pull
          
          # Blue-green deployment simulation
          docker-compose -f docker-compose.telegram.yml up -d --scale app=2
          sleep 30
          docker-compose -f docker-compose.telegram.yml up -d --scale app=1
          
          # Health check
          timeout 90 bash -c 'until curl -f http://localhost:5000/health; do sleep 5; done'
          
          # Database migration if needed
          docker-compose -f docker-compose.telegram.yml exec -T app python -c "
          from app import init_db
          init_db()
          print('✅ Database migration completed')
          "
          
          echo "✅ Production deployment completed"
          
    - name: Set Telegram webhook (production)
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
          -H "Content-Type: application/json" \
          -d '{
            "url": "${{ secrets.PRODUCTION_WEBHOOK_URL }}",
            "secret_token": "${{ secrets.TELEGRAM_WEBHOOK_SECRET }}",
            "allowed_updates": ["message", "web_app_data"]
          }'
          
    - name: Update deployment status (success)
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'success',
            description: 'Deployment completed successfully',
            environment_url: '${{ secrets.PRODUCTION_URL }}'
          });
          
    - name: Update deployment status (failure)
      uses: actions/github-script@v7
      if: failure()
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: 'failure',
            description: 'Deployment failed'
          });

  # === NOTIFICATION ===
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        format: markdown
        message: |
          🥗 *Nutrition Tracker Deployment*
          
          📋 **Details:**
          • Repository: `${{ github.repository }}`
          • Branch: `${{ github.ref_name }}`
          • Commit: `${{ github.sha }}`
          • Actor: @${{ github.actor }}
          
          📊 **Status:**
          • Test: ${{ needs.test.result == 'success' && '✅' || '❌' }}
          • Security: ${{ needs.security.result == 'success' && '✅' || '❌' }}
          • Build: ${{ needs.build.result == 'success' && '✅' || '❌' }}
          • Staging: ${{ needs.deploy-staging.result == 'success' && '✅' || '❌' }}
          • Production: ${{ needs.deploy-production.result == 'success' && '✅' || '❌' }}
          
          🔗 [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  # === CLEANUP ===
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      uses: actions/delete-package-versions@v4
      with:
        package-name: nutrition-tracker
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
