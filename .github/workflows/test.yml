name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Lint with flake8
      run: |
        flake8 src/ --max-line-length=100 --ignore=E501,W503
        black --check src/
        isort --check-only src/
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=term-missing --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run e2e tests
      run: |
        pytest tests/e2e/ -v --cov=src --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run security tests
      run: |
        pytest tests/ -v -m security --cov=src --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run performance tests
      run: |
        pytest tests/ -v -m performance --cov=src --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          test-results.xml

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
    
    - name: Run semgrep scan
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  performance-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Start application
      run: |
        python app.py &
        sleep 10
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run performance tests
      run: |
        locust --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:5000
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          locust-results.csv
          locust-results.html

  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Build Docker image
      run: |
        docker build -t nutrition-tracker:test .
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 5000:5000 nutrition-tracker:test
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Test Docker Compose
      run: |
        docker-compose up -d
        sleep 60
        # Wait for health checks to pass
        timeout 120 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'
        curl -f http://localhost/health || exit 1
        docker-compose down
