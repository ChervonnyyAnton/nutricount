#!/bin/bash
# Build script for Local version (with API adapter)
#
# This script builds the frontend for the Local version which uses
# the ApiAdapter to communicate with the Flask backend.

set -e

echo "🔨 Building Nutricount Local Version..."

# Configuration
FRONTEND_DIR="frontend"
OUTPUT_DIR="frontend/build/local"
SRC_DIR="$FRONTEND_DIR/src"

# Create output directory
echo "📁 Creating output directory..."
mkdir -p "$OUTPUT_DIR"

# Copy HTML template (if exists)
if [ -f "templates/index.html" ]; then
    echo "📄 Copying HTML template..."
    cp templates/index.html "$OUTPUT_DIR/index.html"
fi

# Concatenate JavaScript files
echo "📦 Bundling JavaScript..."
cat > "$OUTPUT_DIR/app.js" << 'EOF'
// Nutricount Local Version - Built with ApiAdapter
// Auto-generated by build-local.sh

EOF

# Add backend adapter interface
cat "$SRC_DIR/adapters/backend-adapter.js" >> "$OUTPUT_DIR/app.js"
echo "" >> "$OUTPUT_DIR/app.js"

# Add API adapter
cat "$SRC_DIR/adapters/api-adapter.js" >> "$OUTPUT_DIR/app.js"
echo "" >> "$OUTPUT_DIR/app.js"

# Add business logic
cat "$SRC_DIR/business-logic/nutrition-calculator.js" >> "$OUTPUT_DIR/app.js"
echo "" >> "$OUTPUT_DIR/app.js"

cat "$SRC_DIR/business-logic/validators.js" >> "$OUTPUT_DIR/app.js"
echo "" >> "$OUTPUT_DIR/app.js"

# Add initialization code
cat >> "$OUTPUT_DIR/app.js" << 'EOF'

// Initialize application with API adapter
(function() {
    'use strict';
    
    // Configuration
    const API_BASE_URL = '/api';
    
    // Create adapter
    const adapter = new ApiAdapter(API_BASE_URL);
    
    // Make adapter globally available
    window.nutritionAdapter = adapter;
    
    console.log('✅ Nutricount Local Version initialized with API adapter');
})();
EOF

echo "✅ Build complete!"
echo "📁 Output: $OUTPUT_DIR"
echo ""
echo "🚀 To deploy:"
echo "   1. Copy $OUTPUT_DIR/app.js to static/js/"
echo "   2. Restart Flask application"
echo "   3. Access at http://localhost:5000"
