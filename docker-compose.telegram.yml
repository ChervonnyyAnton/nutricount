version: '3.8'

services:
  app:
    image: ${DOCKER_IMAGE:-nutrition-tracker:latest}
    container_name: nutrition-tracker-telegram
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - nutrition_data:/usr/src/app/data
      - nutrition_logs:/usr/src/app/logs
      - nutrition_backups:/usr/src/app/backups
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
      - PYTHONUNBUFFERED=1
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_SECRET=${TELEGRAM_WEBHOOK_SECRET}
      - SECRET_KEY=${SECRET_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.example.description=Nutrition Tracker Telegram Web App"
      - "com.example.version=2.0"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: nutrition-nginx-telegram
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.telegram.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Automatic SSL certificate management
  certbot:
    image: certbot/certbot
    container_name: nutrition-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    profiles:
      - ssl

  # Container updates
  watchtower:
    image: containrrr/watchtower
    container_name: nutrition-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_LABEL_ENABLE=true
    profiles:
      - autoupdate

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: nutrition-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: nutrition-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring

volumes:
  nutrition_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  nutrition_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  nutrition_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
