# Pre-commit hooks configuration for Nutrition Tracker
# Install with: pip install pre-commit && pre-commit install

default_stages: [commit]
default_language_version:
  python: python3.11

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.(md|rst)$
      - id: end-of-file-fixer
        exclude: \.(md|rst)$
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
      - id: check-xml
      - id: check-toml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: [--fix=lf]

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        args: [--line-length=120]
        language_version: python3.11

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=120]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: 
          - --max-line-length=120
          - --extend-ignore=E203,W503,E501
          - --max-complexity=10
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --strict]
        additional_dependencies: [types-all]
        exclude: ^(tests/|migrations/)

  # Security checking
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [--skip=B101,B601]
        exclude: ^tests/

  # Safety check for dependencies
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^(tests/|migrations/|scripts/)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [--severity=warning]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore=DL3008,DL3009,DL3015]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-d=relaxed]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: CHANGELOG.md

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run tests
      - id: tests
        name: Run tests
        entry: pytest
        language: system
        types: [python]
        pass_filenames: false
        stages: [push]

      # Check for secrets in code
      - id: check-secrets
        name: Check for secrets
        entry: bash -c 'if grep -r --include="*.py" --include="*.js" --include="*.html" -E "(password|secret|key|token).*=" . | grep -v "example\|placeholder\|TODO\|FIXME"; then echo "Potential secrets found!"; exit 1; fi'
        language: system
        pass_filenames: false

      # Validate environment file
      - id: validate-env-example
        name: Validate .env.example
        entry: bash -c 'if [ -f .env.example ]; then echo "✅ .env.example exists"; else echo "❌ .env.example missing"; exit 1; fi'
        language: system
        files: \.env\.example$
        pass_filenames: false

      # Check requirements file format
      - id: requirements-txt-fixer
        name: Fix requirements.txt
        entry: bash -c 'for file in requirements*.txt; do [ -f "$file" ] && sort -u "$file" -o "$file"; done'
        language: system
        files: requirements.*\.txt$

      # Validate Docker files
      - id: validate-docker
        name: Validate Docker configuration
        entry: bash -c 'docker-compose -f docker-compose.yml config > /dev/null && docker-compose -f docker-compose.telegram.yml config > /dev/null'
        language: system
        files: docker-compose.*\.yml$
        pass_filenames: false

      # Check database schema
      - id: validate-schema
        name: Validate database schema
        entry: bash -c 'if [ -f schema.sql ]; then sqlite3 :memory: < schema.sql; fi'
        language: system
        files: schema\.sql$
        pass_filenames: false

# Configuration for specific tools
ci:
  autoupdate_schedule: monthly
  skip: []
  submodules: false
